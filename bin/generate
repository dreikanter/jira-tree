#!/usr/bin/env ruby

require 'jira-ruby'
require 'dotenv'
require 'logger'
require 'pry'
require 'awesome_print'
require 'uri'
require 'mustache'

Dotenv.load

LOGGER = Logger.new($stdout)

REQUIRED_ENV_VARS = %w(
  JIRA_USERNAME
  JIRA_PASSWORD
  JIRA_SITE
  JIRA_PROJECT_KEY
).freeze

OUTPUT_FILE = ENV['OUTPUT_FILE'] || 'report.html'
TEMPLATE_FILE = ENV['TEMPLATE_FILE'] || 'template.html'
TEMPLATE_FULL_PATH =
  File.expand_path(File.join('../..', TEMPLATE_FILE), __FILE__)

undefined_vars = REQUIRED_ENV_VARS.reject { |v| ENV.key? v }
unless undefined_vars.empty?
  abort "Undefined environment variables: #{undefined_vars.join(', ')}"
end

class JiraBrowser
  attr_reader :site
  attr_reader :project_key
  attr_reader :client

  DEFAULT_CLIENT_OPTIONS = {
    context_path: '',
    auth_type: :basic
  }

  def initialize(options = {})
    @site = options[:site]
    @project_key = options[:project_key]
    @client = JIRA::Client.new(DEFAULT_CLIENT_OPTIONS.merge(options))
  end

  def data
    epics = load_epics
    tasks = load_tasks(epics.keys)

    tasks.each do |task|
      epics[task[:epic_key]][:subtasks] << task
    end

    epics.values
  end

  private

  def load_epics
    query = [
      'issuetype = Epic',
      'status in ("In Progress", "To Do")',
      "project = '#{project_key}'"
    ].join(' AND ')
    LOGGER.debug("JQL: #{query}")
    client.Issue.jql(query).map { |issue| [issue.key, issue_hash(issue)] }.to_h
  end

  def load_tasks(epic_keys)
    query = "'Epic Link' in (#{csv(epic_keys)})"
    LOGGER.debug("JQL: #{query}")
    client.Issue.jql(query).map { |issue| task_hash(issue) }
  end

  def issue_hash(issue)
    {
      key: issue.key,
      summary: issue.summary,
      url: issue_url(issue.key),
      status: issue.fields['status']['name'],
      type: issue.fields['issuetype']['name'],
      created: issue.created,
      updated: issue.updated,
      subtasks: []
    }
  end

  def task_hash(issue)
    issue_hash(issue).merge(
      epic_key: issue.customfield_10003,
      subtasks: issue.subtasks.map { |subtask| subtask_hash(subtask) }
    )
  end

  def subtask_hash(issue)
    {
      key: issue['key'],
      summary: issue['fields']['summary'],
      url: issue_url(issue['key']),
      type: issue['fields']['issuetype']['name'],
      status: issue['fields']['status']['name']
    }
  end

  def issue_url(key)
    URI.join(site, '/browse/', key).to_s
  end

  def csv(values)
    values.join(',')
  end
end

browser = JiraBrowser.new(
  username: ENV['JIRA_USERNAME'],
  password: ENV['JIRA_PASSWORD'],
  site: ENV['JIRA_SITE'],
  project_key: ENV['JIRA_PROJECT_KEY']
)

# puts JSON.pretty_generate browser.data

issues = browser.data

File.open(OUTPUT_FILE, 'w') do |f|
  LOGGER.info("Template: #{TEMPLATE_FULL_PATH}")
  LOGGER.info("Writing to '#{OUTPUT_FILE}'")
  f.write(Mustache.render(File.read(TEMPLATE_FULL_PATH), issues: issues))
end
